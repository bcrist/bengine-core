#pragma once
#ifndef BE_CORE_SOURCE_HANDLE_HPP_
#define BE_CORE_SOURCE_HANDLE_HPP_

#include "mutable_handle_base.hpp"

namespace be {

///////////////////////////////////////////////////////////////////////////////
/// \brief  Defines the existence of another object which can be referenced by
///         other handle types.
/// \details SourceHandle objects can be associated with a target object's
///         address and can be used to copy construct additional Handles and
///         ConstHandles that reference the associated object.
/// 
///         When a SourceHandle is destroyed, all handles created from it will
///         become invalid, and converting them to a pointer will yield
///         \c nullptr.
///
///         SourceHandles (and the underlying handle managers) are <b>not</b>
///         synchronized for access from multiple threads!  All SourceHandles
///         of a particular type must be created and destroyed from the same
///         thread.  Since handles have no locking mechanism, the application
///         must be designed in such a way that handled objects will not be
///         destroyed or moved between the time that the handle is converted
///         to a raw pointer and the time the handle client is done with the
///         handled object.  Therefore in many situations it doesn't make
///         much sense to use handles from multiple threads anyway.
///
///         Each object which can have handles should have exactly one
///         SourceHandle object as a member (usually the first member, so that
///         it will be destroyed last).  Handles can then be generated by
///         copying the SourceHandle.  For example:
///
/// \code
///     class MyClass
///     {
///     public:
///        MyClass()
///        {
///           handle_.associate(this);
///        }
///
///        const Handle<MyClass>& getHandle()
///        {
///           return handle_;
///        }
///
///        const ConstHandle<MyClass>& getHandle() const
///        {
///           return handle_;
///        }
///
///     private:
///        SourceHandle<MyClass> handle_;
///     };
/// \endcode
/// 
/// Handles to objects which use move-semantics will remain valid when the
/// object is moved, as long as the SourceHandle is moved correctly:
///
/// \code
///     class MoveableClass
///     {
///     public:
///        MoveableClass()
///        {
///           handle_.associate(this);
///        }
///
///        MoveableClass(MoveableClass&& other)
///           : handle_(std::move(other.handle_))
///        {
///           handle_.associate(this);
///        }
///
///        MoveableClass& operator=(MoveableClass&& other)
///        {
///           handle_ = std::move(other.handle_);
///           return *this;
///        }
///
///        const Handle<MoveableClass>& getHandle()
///        {
///           return handle_;
///        }
///
///        const ConstHandle<MoveableClass>& getHandle() const
///        {
///           return handle_;
///        }
///
///     private:
///        SourceHandle<MoveableClass> handle_;
///     };
///
///
///     MoveableClass a;
///     Handle<MoveableClass> h_a = a.getHandle();
///
///     MoveableClass b = std::move(a);
///     Handle<MoveableClass> h_b = b.getHandle();
///
///     assert(h_a == h_b);
///     assert(h_a.get() == h_b.get() == &b);
/// \endcode
///
/// \note   Due to the C++ static deinitialization order fiasco, all
///         SourceHandles should be destroyed before static deinitialization
///         begins.  This means static objects cannot have ownership of a
///         SourceHandle, either directly or indirectly (through ownership of
///         another object).
///
/// \tparam T The type of the object to be handled.
///
/// \sa     Handleable<T>
///
/// \ingroup handles
template <typename T>
class SourceHandle final : Movable, public detail::MutableHandleBase<T> {
   friend void swap(SourceHandle& a, SourceHandle& b) { a.swap_(b); }
public:
   SourceHandle();
   SourceHandle(SourceHandle<T>&& other);
   SourceHandle<T>& operator=(SourceHandle<T>&& other);
   ~SourceHandle();

   void associate(T* target);

private:
   void swap_(SourceHandle& other);
};

} // be

#include "source_handle.inl"

#endif
