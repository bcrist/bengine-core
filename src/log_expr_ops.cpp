#include "pch.hpp"
#include "log_expr_ops.hpp"
#include "log_attrib_ids.hpp"

namespace be {

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log(v::Verbosity verbosity, const char* source) {
   return detail::LogEntry(verbosity, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_fatal(const char* source)  {
   return detail::LogEntry(v::fatal, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_error(const char* source) {
   return detail::LogEntry(v::error, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_warn(const char* source) {
   return detail::LogEntry(v::warning, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_notice(const char* source) {
   return detail::LogEntry(v::notice, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_info(const char* source)   {
   return detail::LogEntry(v::info, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_verbose(const char* source)   {
   return detail::LogEntry(v::verbose, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short(v::Verbosity verbosity, const char* source) {
   return detail::LogEntry(verbosity, true, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_fatal(const char* source)  {
   return detail::LogEntry(v::fatal, true, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_error(const char* source) {
   return detail::LogEntry(v::error, true, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_warn(const char* source) {
   return detail::LogEntry(v::warning, true, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_notice(const char* source) {
   return detail::LogEntry(v::notice, true, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_info(const char* source)   {
   return detail::LogEntry(v::info, true, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_verbose(const char* source)   {
   return detail::LogEntry(v::verbose, true, source);
}

#if defined(BE_DEBUG) || defined(BE_FORCE_DEBUG_LOG)

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_debug(const char* source) {
   return detail::LogEntry(v::debug, false, source);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogEntry log_short_debug(const char* source) {
   return detail::LogEntry(v::debug, true, source);
}

#else

///////////////////////////////////////////////////////////////////////////////
detail::DisabledLogEntry log_debug(const char*) {
   return detail::DisabledLogEntry();
}

///////////////////////////////////////////////////////////////////////////////
detail::DisabledLogEntry log_short_debug(const char*) {
   return detail::DisabledLogEntry();
}

#endif

///////////////////////////////////////////////////////////////////////////////
detail::NullLogExpr log_nil() {
   return detail::NullLogExpr();
}

///////////////////////////////////////////////////////////////////////////////
detail::LogAttr log_more() {
   return detail::LogAttr(Id());
}

///////////////////////////////////////////////////////////////////////////////
detail::LogAttr attr(Id id) {
   return detail::LogAttr(id);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogAttr attr(U64 id) {
   return detail::LogAttr(Id(id));
}

///////////////////////////////////////////////////////////////////////////////
detail::LogAttr attr(const S& name) {
   return detail::LogAttr(Id(name));
}

///////////////////////////////////////////////////////////////////////////////
detail::LogAttr attr(S&& name) {
   return detail::LogAttr(Id(std::move(name)));
}

///////////////////////////////////////////////////////////////////////////////
detail::LogAttr attr(const char* name) {
   return detail::LogAttr(Id(name));
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr attr(Id id, v::Verbosity verbosity) {
   return detail::VerboseLogAttr(id, verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr attr(U64 id, v::Verbosity verbosity) {
   return detail::VerboseLogAttr(Id(id), verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr attr(const S& name, v::Verbosity verbosity) {
   return detail::VerboseLogAttr(Id(name), verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr attr(S&& name, v::Verbosity verbosity) {
   return detail::VerboseLogAttr(Id(std::move(name)), verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr attr(const char* name, v::Verbosity verbosity) {
   return detail::VerboseLogAttr(Id(name), verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr hidden(Id id) {
   return detail::VerboseLogAttr(id, v::hidden);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr hidden(U64 id) {
   return detail::VerboseLogAttr(Id(id), v::hidden);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr hidden(const S& name) {
   return detail::VerboseLogAttr(Id(name), v::hidden);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr hidden(S&& name) {
   return detail::VerboseLogAttr(Id(std::move(name)), v::hidden);
}

///////////////////////////////////////////////////////////////////////////////
detail::VerboseLogAttr hidden(const char* name) {
   return detail::VerboseLogAttr(Id(name), v::hidden);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogForm short_form(v::Verbosity verbosity) {
   return detail::LogForm(true, verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogForm long_form(v::Verbosity verbosity) {
   return detail::LogForm(false, verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogForm short_form(bool short_form, v::Verbosity verbosity) {
   return detail::LogForm(short_form, verbosity);
}

///////////////////////////////////////////////////////////////////////////////
detail::LogForm long_form(bool long_form, v::Verbosity verbosity) {
   return detail::LogForm(!long_form, verbosity);
}

///////////////////////////////////////////////////////////////////////////////
BE_NO_INLINE detail::LogInsertion<detail::LogAttr, StackTrace> trace() {
   return attr(ids::log_attr_trace) << get_stack_trace(1);
}

///////////////////////////////////////////////////////////////////////////////
void operator|(LogRecord rec, Log& log) {
   log.post(std::move(rec));
}

///////////////////////////////////////////////////////////////////////////////
void operator||(const LogRecord& rec, Log& log) {
   log.handle(rec);
}

namespace detail {

///////////////////////////////////////////////////////////////////////////////
bool operator|(const DisabledLogEntry&, Log&) {
   return false;
}

///////////////////////////////////////////////////////////////////////////////
bool operator||(const DisabledLogEntry&, Log&) {
   return false;
}

///////////////////////////////////////////////////////////////////////////////
bool operator||(const DisabledLogEntry&, LogRecord&) {
   return false;
}

} // be::detail
} // be
